# -*- coding: utf-8 -*-
"""zomato.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A9FbN7Ormemg6rvG-vL-024ISbCK8myg
"""



"""MOHIT KUMAR LIT2022032  ZOMATO INTERNSHIP ASSIGNMENT

#Web Scraping (from public restaurant pages)

There are 6 Zomato Connected Restaurant

1. The Terrace
2. The Big Grill
3. Barbeque Nation
4. Cafe HONS - House of No Sugar
5. The Penthouse Cafe
6. HONS - All Day Dining
"""

import json

# Initial 3 Restaurants
restaurants = [
    {
        "name": "The Terrace",
        "location": "Hazratganj, Lucknow",
        "contact": "+91 8400020242",
        "hours": "12noon ‚Äì 11pm",
        "features": ["Vegetarian Options", "Live Music", "Rooftop Seating"],
        "menu": [
            {"item": "Paneer Lababdar", "description": "Cottage cheese in creamy tomato gravy", "price": "‚Çπ320"},
            {"item": "Dal Makhani", "description": "Black lentils cooked overnight", "price": "‚Çπ260"},
            {"item": "Butter Naan", "description": "Soft tandoori bread", "price": "‚Çπ60"},
        ]
    },
    {
        "name": "The Big Grill",
        "location": "Gomti Nagar, Lucknow",
        "contact": "+91 7408428333",
        "hours": "12noon ‚Äì 11pm",
        "features": ["Buffet", "Non-Veg", "Spicy Grill Specials"],
        "menu": [
            {"item": "Chicken Tandoori", "description": "Spiced grilled chicken", "price": "‚Çπ350"},
            {"item": "Mutton Seekh Kebab", "description": "Minced lamb skewers", "price": "‚Çπ400"},
            {"item": "Veg Biryani", "description": "Fragrant rice with vegetables", "price": "‚Çπ290"},
        ]
    },
    {
        "name": "Barbeque Nation",
        "location": "Aliganj, Lucknow",
        "contact": "+91 9876543210",
        "hours": "12noon ‚Äì 3:30pm, 6:30pm ‚Äì 11pm",
        "features": ["Live Grill", "Buffet", "Veg & Non-Veg", "Allergen Info"],
        "menu": [
            {"item": "Pineapple Grill", "description": "Grilled pineapple with spices", "price": "‚Çπ280"},
            {"item": "Fish Tikka", "description": "Boneless fish with Indian spices", "price": "‚Çπ390"},
            {"item": "Brownie with Ice Cream", "description": "Hot brownie & vanilla ice cream", "price": "‚Çπ190"},
        ]
    }
]

# Add 3 more restaurants based on your new list
more_restaurants = [
    {
        "name": "Cafe HONS - House of No Sugar",
        "location": "Gomti Nagar, Lucknow",
        "contact": "+91 9511113486",
        "hours": "11am ‚Äì 11pm",
        "features": ["Sugar-Free Options", "Healthy Bites", "Vegan Friendly"],
        "menu": [
            {"item": "Keto Brownie", "description": "Low-carb chocolate dessert", "price": "‚Çπ180"},
            {"item": "Avocado Toast", "description": "Whole grain bread with fresh avocado", "price": "‚Çπ220"},
            {"item": "Herbal Tea", "description": "Natural detox infusion", "price": "‚Çπ100"},
        ]
    },
    {
        "name": "The Penthouse Cafe",
        "location": "Aliganj, Lucknow",
        "contact": "+91 7754067756",
        "hours": "11am ‚Äì 10:30pm",
        "features": ["Rooftop Seating", "Instagrammable", "Live Music"],
        "menu": [
            {"item": "Veggie Burger", "description": "Loaded burger with fresh veggies", "price": "‚Çπ260"},
            {"item": "Fries Platter", "description": "3 styles of fries", "price": "‚Çπ180"},
            {"item": "Oreo Shake", "description": "Creamy shake with Oreo bits", "price": "‚Çπ150"},
        ]
    },
    {
        "name": "HONS - All Day Dining",
        "location": "Hazratganj, Lucknow",
        "contact": "+91 9511113486",
        "hours": "10am ‚Äì 11pm",
        "features": ["All-Day Menu", "Sugar-Free Desserts", "Family Friendly"],
        "menu": [
            {"item": "Grilled Chicken Salad", "description": "Lean protein with fresh greens", "price": "‚Çπ280"},
            {"item": "Zucchini Pasta", "description": "Gluten-free spiral pasta", "price": "‚Çπ300"},
            {"item": "Sugar-Free Cheesecake", "description": "Baked dessert with stevia", "price": "‚Çπ240"},
        ]
    }
]

# Append to the original restaurant list
restaurants.extend(more_restaurants)

# Save updated list to JSON
with open("restaurants.json", "w", encoding='utf-8') as f:
    json.dump(restaurants, f, indent=4, ensure_ascii=False)

print("‚úÖ All 6 restaurants saved to 'restaurants.json'")

# Load and view saved JSON
with open("restaurants.json", "r", encoding="utf-8") as f:
    data = json.load(f)

# Print sample
for res in data:
    print(res["name"], "=>", len(res["menu"]), "menu items")

"""# Knowledge Based Creation"""

!pip install -q faiss-cpu sentence-transformers

import json
from sentence_transformers import SentenceTransformer
import faiss
import numpy as np

# Load restaurants.json
with open("restaurants.json", "r", encoding="utf-8") as f:
    restaurants = json.load(f)

# Flatten data into text chunks for RAG
documents = []
metadata = []

for res in restaurants:
    base = f"{res['name']} ({res['location']})\nHours: {res['hours']}\nContact: {res['contact']}\nFeatures: {', '.join(res['features'])}\n"

    for item in res['menu']:
        text = f"{base}Menu Item: {item['item']}\nDescription: {item['description']}\nPrice: {item['price']}"
        documents.append(text)
        metadata.append({"restaurant": res["name"], "menu_item": item["item"]})

# Load embedding model
model = SentenceTransformer("all-MiniLM-L6-v2")

# Embed all documents
embeddings = model.encode(documents, show_progress_bar=True)

# Convert to float32 numpy array (required by FAISS)
embedding_matrix = np.array(embeddings).astype("float32")

# Initialize FAISS index
dimension = embedding_matrix.shape[1]
index = faiss.IndexFlatL2(dimension)

# Add embeddings
index.add(embedding_matrix)

print(f"‚úÖ FAISS index created with {index.ntotal} documents.")

"""# Building the RAG Chatbot"""

!pip install -q transformers

from transformers import pipeline

# Load a small text generation model
generator = pipeline('text2text-generation', model='google/flan-t5-small')

def retrieve_context(query, top_k=3):
    """Retrieve top_k similar documents for the query"""
    query_embedding = model.encode([query]).astype("float32")
    distances, indices = index.search(query_embedding, top_k)
    retrieved_docs = [documents[i] for i in indices[0]]
    return "\n\n".join(retrieved_docs)

def generate_answer(query):
    """Retrieve context and generate answer"""
    context = retrieve_context(query)
    prompt = f"Answer the question based on the following restaurant information:\n\n{context}\n\nQuestion: {query}"
    response = generator(prompt, max_length=300, do_sample=True)[0]['generated_text']
    return response

while True:
    user_query = input("\nAsk about restaurants üçΩÔ∏è (or type 'exit' to quit): ")
    if user_query.lower() == "exit":
        break
    answer = generate_answer(user_query)
    print("\nü§ñ:", answer)

"""# streamlit UI"""

!pip install streamlit

import streamlit as st

# Temporary dummy answer function
def generate_answer(query):
    return "Sorry, I'm still learning! You asked: " + query

# Streamlit UI
st.title("Restaurant Query Chatbot üçΩÔ∏è")

st.write(
    """
    Ask about restaurant menus, prices, dietary options, and more!
    Type 'exit' to quit.
    """
)

# User input
user_query = st.text_input("Ask your question about restaurants:")

if user_query:
    answer = generate_answer(user_query)
    st.write("ü§ñ Answer:", answer)

!streamlit run app.py

# Streamlit app code
app_code = """
import streamlit as st
from transformers import pipeline
import faiss
import numpy as np
import json
from sentence_transformers import SentenceTransformer

# Load restaurant data
with open("restaurants.json", "r", encoding="utf-8") as f:
    restaurants = json.load(f)

# Initialize model for embedding
model = SentenceTransformer("all-MiniLM-L6-v2")

# Load FAISS index
dimension = 384  # Dimension of the embedding vectors (MiniLM-L6)
index = faiss.IndexFlatL2(dimension)

# Flatten data into text chunks for RAG
documents = []
metadata = []
for res in restaurants:
    base = f"{res['name']} ({res['location']})\\nHours: {res['hours']}\\nContact: {res['contact']}\\nFeatures: {', '.join(res['features'])}\\n"
    for item in res['menu']:
        text = f"{base}Menu Item: {item['item']}\\nDescription: {item['description']}\\nPrice: {item['price']}"
        documents.append(text)
        metadata.append({"restaurant": res["name"], "menu_item": item["item"]})

# Embed all documents
embeddings = model.encode(documents, show_progress_bar=True)
embedding_matrix = np.array(embeddings).astype("float32")
index.add(embedding_matrix)

# Load a small text generation model
generator = pipeline('text2text-generation', model='google/flan-t5-small')

def retrieve_context(query, top_k=3):
    query_embedding = model.encode([query]).astype("float32")
    distances, indices = index.search(query_embedding, top_k)
    retrieved_docs = [documents[i] for i in indices[0]]
    return "\\n\\n".join(retrieved_docs)

def generate_answer(query):
    context = retrieve_context(query)
    prompt = f"Answer the question based on the following restaurant information:\\n\\n{context}\\n\\nQuestion: {query}"
    response = generator(prompt, max_length=300, do_sample=True)[0]['generated_text']
    return response

# Streamlit UI
st.title("Restaurant Query Chatbot üçΩÔ∏è")
st.write("Ask about restaurant menus, prices, dietary options, and more! Type 'exit' to quit.")

# User input
user_query = st.text_input("Ask your question about restaurants:")

if user_query:
    answer = generate_answer(user_query)
    st.write("ü§ñ Answer: ", answer)
"""

# Write the code to app.py
with open("/content/app.py", "w") as file:
    file.write(app_code)

print("‚úÖ app.py created successfully!")

!pip install pyngrok

!ngrok config add-authtoken 2wG9qx8ztvPiowhYZYzfROuUQWA_3ZB59vQGW3DkLfd445WMi

from pyngrok import ngrok

# Open tunnel
public_url = ngrok.connect(8501)
print("üîó Open this HTTPS URL:", public_url)